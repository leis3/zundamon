name: Rust

on:
  push:
    branches:
      - '*'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+**'
    pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
        - stable-x86_64-unknown-linux-gnu
        include:
        - { toolchain: stable-x86_64-unknown-linux-gnu, additional-target: x86_64-unknown-linux-musl, os: ubuntu-latest }

    name: ${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup `${{ matrix.toolchain }}`
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        target: ${{ matrix.additional-target }}
        default: true
        profile: minimal

    - name: Download
      run: |
        curl -sSfL https://github.com/VOICEVOX/voicevox_core/releases/latest/download/download-linux-x64 -o download
        chmod +x download
        ./download

    - name: Build
      run: LD_LIBRARY_PATH=./voicevox_core:$LD_LIBRARY_PATH cargo build --verbose

  upload:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
        - stable-x86_64-unknown-linux-gnu
        include:
        - { toolchain: stable-x86_64-unknown-linux-gnu, target-triple: x86_64-unknown-linux-gnu, os: ubuntu-latest }

    name: Upload (${{ matrix.target-triple }})
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup `${{ matrix.toolchain }}`
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        default: true
        profile: minimal

    - name: Download voicevox_core
      run: |
        curl -sSfL https://github.com/VOICEVOX/voicevox_core/releases/latest/download/download-linux-x64 -o download
        chmod +x download
        ./download

    - name: Install
      run: LD_LIBRARY_PATH=./voicevox_core:$LD_LIBRARY_PATH cargo install --path core -v --locked
      
    - name: Create an asset
      id: asset
      run: |
        BIN_TARGET=zundamon
        # ASSET_STEM="$BIN_TARGET-${GITHUB_REF#refs/tags/}-${{ matrix.target-triple }}"
        ASSET_STEM="$BIN_TARGET-${{ matrix.target-triple }}"
        git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
        tar -xf "./$ASSET_STEM.tar"
        mv "$HOME/.cargo/bin/$BIN_TARGET" "./$ASSET_STEM/"
        ASSET="$ASSET_STEM.tar.gz"
        tar -czvf "./$ASSET" "./$ASSET_STEM"
        echo "::set-output name=asset::$ASSET"
      shell: bash

    - name: Upload the asset
      uses: actions/upload-artifact@v2
      with:
        name: assets
        path: ${{ steps.asset.outputs.asset }}

  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [build, upload]

    steps:
    - name: Download the assets
      uses: actions/download-artifact@v2
      with:
        name: assets
        path: ./assets

    - name: GH Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

